name: iOS CI/CD Pipeline
on:
  push:
    branches:
      - ci/cd
  pull_request:
    branches:
      - ci/cd
jobs:
  test:
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Run Unit Test
        run: |
          xcodebuild test -project ritmix.xcodeproj \
            -scheme ritmixTests \
            -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.1' \
            -only-testing:ritmixTests
            CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO

  archive:
    runs-on: macos-latest
    needs: test
    steps:
      - name: Check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build Archive
        run: |
          xcodebuild archive -scheme "ritmix" \
          -archivePath $RUNNER_TEMP/ritmix.xcarchive \
          -sdk iphoneos \
          -configuration Release \
          -destination generic/platform=iOS \
          -verbose

      - name: Export ipa
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH

          ARCHIVE_PATH=$RUNNER_TEMP/ritmix.xcarchive
          if [ ! -d "$ARCHIVE_PATH" ]; then
            echo "Error: Archive not found at $ARCHIVE_PATH"
            exit 1
          fi

          ls -R "$ARCHIVE_PATH"

          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/ritmix.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build

      - name: Upload to TestFlight
        # uses: apple-actions/upload-testflight-build@v1
        # with:
        # app-path: ${{ runner.temp }}/build/ritmix.ipa
        # issuer-id: ${{ secrets.APP_STORE_API_ISSUER_ID }}
        # api-key-id: ${{ secrets.APP_STORE_API_KEY_ID }}
        # api-private-key: ${{ secrets.APP_STORE_API_PRIVATE_KEY }}
        # TestFlight Groups (comma-separated if multiple)
        run: |
          # TestFlight Groups (comma-separated if multiple)
          TESTFLIGHT_GROUPS="Beta Testers,Internal Testers"
          
          # Prepare the API key file from secret
          echo "${{ secrets.APP_STORE_API_KEY_ID }}" > "${{ runner.temp }}/api_key.p8"
          chmod 400 "${{ runner.temp }}/api_key.p8"
          
          # Upload to TestFlight using altool
          xcrun altool --upload-app \
            -f "$IPA_PATH" \
            --type ios \
            --apiKey "${{ secrets.APP_STORE_API_KEY_ID }}" \
            --apiIssuerID "${{ secrets.APP_STORE_API_ISSUER_ID }}" \
            --apiPrivateKeyPath "${{ runner.temp }}/api_key.p8"
          
          # Wait a moment for the build to process
          sleep 30
          
          # Get the latest build ID
          BUILD_ID=$(xcrun altool --list-builds \
            -u "${{ secrets.APPLE_ID }}" \
            -p "${{ secrets.APP_SPECIFIC_PASSWORD }}" \
            --apiKey "${{ secrets.APP_STORE_API_KEY_ID }}" \
            --apiIssuerID "${{ secrets.APP_STORE_API_ISSUER_ID }}" \
            --apiPrivateKeyPath "${{ runner.temp }}/api_key.p8" \
            | grep -m 1 "Build:" | awk '{print $2}')
          
          # Distribute to groups
          for GROUP in $(echo "$TESTFLIGHT_GROUPS" | tr ',' '\n')
          do
            echo "Adding build to group: $GROUP"
            xcrun altool --add-build-to-testflight-group \
              -u "${{ secrets.APPLE_ID }}" \
              -p "${{ secrets.APP_SPECIFIC_PASSWORD }}" \
              --apiKey "${{ secrets.APP_STORE_API_KEY_ID }}" \
              --apiIssuerID "${{ secrets.APP_STORE_API_ISSUER_ID }}" \
              --apiPrivateKeyPath "${{ runner.temp }}/api_key.p8" \
              --group "$GROUP" \
              --build "$BUILD_ID"
          done
          
          # Clean up the API key file
          rm "${{ runner.temp }}/api_key.p8"
